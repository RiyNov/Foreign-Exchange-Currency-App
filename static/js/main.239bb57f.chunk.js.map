{"version":3,"sources":["components/ExchangeCurrency/ExchangeCurrency.js","App.js","serviceWorker.js","index.js"],"names":["ExchangeCurrency","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","arrData","temp","rates","currencyOption","initialCurrency","pickedCurrency","currencyDesc","initialValue","rate2count","rateExpected","btnDisplay","display","formDisplay","optDisplay","optDisable","btnDisable","event","_this2","axios","get","then","response","setState","data","catch","err","console","log","e","_this3","key","target","value","selectedDesc","i","items","toConsumableArray","valueToRemove","filteredItems","filter","x","item","newIV","_this4","push","changeRate","dataUpdate","validation","updateItem","btnDisplayOn","_this5","react_default","a","createElement","className","type","name","onChange","changeInitialValue","map","data2show","number_format_default","displayType","thousandSeparator","decimalScale","onClick","deleteItem","style","btnClicked","list","placeholder","onSelect","id","op","disabled","onSubmit","Component","App","components_ExchangeCurrency_ExchangeCurrency","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.239bb57f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport NumberFormat from 'react-number-format';\nimport axios from 'axios';\nimport './ExchangeCurrency.css';\n\nclass ExchangeCurrency extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            arrData : [],\n            temp : [],\n            rates : [],\n            currencyOption : [\"USD\",\"CAD\",\"IDR\",\"GBP\",\"CHF\",\"SGD\",\"INR\",\"MYR\",\"JPY\",\"KRW\"],\n            initialCurrency : 'USD',\n            pickedCurrency : '',\n            currencyDesc : '',\n            initialValue : 10.00,\n            rate2count : 0,\n            rateExpected : 0,\n            btnDisplay : {display : ''},\n            formDisplay : {display : 'none'},\n            optDisplay : {display : ''},\n            optDisable : false,\n            btnDisable : true,\n            event : ''\n        }\n    }\n\n    componentDidMount(){\n        axios.get('https://api.exchangeratesapi.io/latest?base='+this.state.initialCurrency)\n        .then(response => {\n            this.setState({\n                rates: response.data.rates,\n            })\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n    \n    changeRate(e) {\n        const key = e.target.value;\n        var selectedDesc = '';\n        if (key === 'USD') selectedDesc = 'United State Dollar'\n        else if (key === 'CAD') selectedDesc = 'Canadian Dollar'\n        else if (key === 'IDR') selectedDesc = 'Indonesia Rupiah'\n        else if (key === 'GBP') selectedDesc = 'Pound sterling'\n        else if (key === 'CHF') selectedDesc = 'Swiss Franc'\n        else if (key === 'SGD') selectedDesc = 'Singapore Dollar'\n        else if (key === 'INR') selectedDesc = 'Indian Rupee'\n        else if (key === 'MYR') selectedDesc = 'Malaysian Ringgit'\n        else if (key === 'JPY') selectedDesc = 'Japanese Yen'\n        else if (key === 'KRW') selectedDesc = 'South Korean Won'\n        this.setState(state => {\n            state.rate2count = this.state.rates[key];\n            state.pickedCurrency = key;\n            state.currencyDesc = selectedDesc;\n            return state;\n        });\n    }\n\n    btnDisplayOn() {  \n        this.setState(state => {\n            state.btnDisplay = {display : ''};\n            state.formDisplay = {display : 'none'};\n            return state;\n        });\n    }\n\n    deleteItem(e, i) {\n        const items = [...this.state.arrData];\n        const valueToRemove = i;\n        const filteredItems = items.filter((x,item) => item !== valueToRemove)\n        this.setState(state => {\n            state.arrData = filteredItems\n            return state;\n        })\n    }\n\n    btnClicked(){\n        this.setState(state => {\n            state.btnDisplay = {display : 'none'};\n            state.formDisplay = {display : ''};\n            return state;\n        });\n    }\n\n    changeInitialValue(e) {\n        const newIV = e.target.value\n        this.setState(state => {\n            state.initialValue = newIV\n            return state;\n        })\n    }\n\n    disableOpt() {\n        this.setState(state => {\n            state.optDisable = true;\n            return state;\n        })\n    }\n\n    dataUpdate() {\n        this.setState(state => {\n            state.temp = [this.state.pickedCurrency, this.state.currencyDesc,this.state.rate2count]\n            return state;\n        })\n    }\n\n    validation() {\n        if (this.state.temp !== [])\n        this.setState(state => {\n            state.btnDisable = false;\n            return state;\n        })\n    }\n    \n    updateItem() {\n        this.state.arrData.push(this.state.temp)\n        this.setState(state => {\n            state.pickedCurrency = ''\n        })\n    }\n\n    onSelect(e) {\n        this.changeRate(e);\n        this.dataUpdate();\n        this.validation();\n    }\n\n    onSubmit(e){\n        this.updateItem();\n        this.btnDisplayOn();\n    }\n\n\n    render(){\n        return (\n            <div className = 'feca'>\n                <div className = 'feca-initalCurrency'>\n                    <div className = 'feca-initalCurrency-desc'>USD - United State Dollar</div>\n                    <div className = 'flex-container'>\n                        <div className = 'feca-initalCurrency-currencyTitle'>{this.state.initialCurrency}</div>\n                        <div className = 'feca-initalCurrency-valueTile'>\n                            <input className = 'feca-initalCurrency-valueTile-input' type=\"number\" name=\"initialValue\" onChange={(e) => this.changeInitialValue(e)} value = {this.state.initialValue}/>\n                        </div>\n                    </div>\n                </div>\n                <div className = 'feca-exchangeRateDisplay'>\n                    <ul className = 'feca-exchangeRateDisplay-ul'>\n                        {/* \n                        data2show[0] = Currency\n                        data2show[1] = Currency Description\n                        data2show[2] = Exchange Rate\n                        */}\n                        {this.state.arrData.map((data2show, i) => \n                        <li className='feca-exchangeRateDisplay-ul-li' key = {i}>\n                            <div className = 'flex-container'>\n                                <div className = 'feca-exchangeRateDisplay-item'>\n                                    <div className = 'feca-exchangeRateDisplay-item-detail'>\n                                        <div className = 'flex-container'>\n                                            <div className = 'feca-exchangeRateDisplay-item-detail-currency'>{data2show[0]}</div>\n                                            <div className = 'feca-exchangeRateDisplay-item-detail-value'>\n                                                <NumberFormat value={data2show[2] * this.state.initialValue} displayType={'text'} thousandSeparator={true} decimalScale = {2}/>\n                                            </div>\n                                        </div>\n                                        <div className = 'feca-exchangeRateDisplay-item-detail-desc'>\n                                            {data2show[0]} - {data2show[1]}\n                                        </div>\n                                        <div className = 'feca-exchangeRateDisplay-item-detail-rate'>\n                                            1 {this.state.initialCurrency} = <NumberFormat value={data2show[2]} displayType={'text'} thousandSeparator={true} decimalScale = {2}/> {data2show[0]}\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className = 'feca-exchangeRateDisplay-item-delete'>\n                                    <button className = 'feca-exchangeRateDisplay-item-delete-btn' onClick = {(e) => this.deleteItem(e, i)}>(-)</button>\n                                </div>\n                            </div>\n                        </li>)}\n                    </ul>\n                </div>\n                <div className = 'feca-addMore'>\n                    <div className = 'feca-addMore-btn' style = {this.state.btnDisplay}>\n                        <button onClick = {() => this.btnClicked()}>(+) Add More Currencies</button>\n                    </div>\n                    <div className = 'feca-addMore-form' style = {this.state.formDisplay}>\n                        <input type=\"text\" list=\"currencies\" placeholder = \"Choose Currency\" className = 'feca-addMore-form-dropdown' value = {this.state.pickedCurrency} onChange={(e) => this.onSelect(e)}/>\n                        <datalist id=\"currencies\">\n                            {this.state.currencyOption.map((op, i) => <option key={i}>{op}</option>)}\n                        </datalist>\n                        <button className = 'feca-addMore-form-submit' disabled = {this.state.btnDisable} onClick = {(e) => this.onSubmit(e)}>Submit</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ExchangeCurrency;","import React from 'react';\nimport './App.css';\n\nimport ExchangeCurrency from './components/ExchangeCurrency/ExchangeCurrency';\n\nfunction App() {\n  return (\n    <div>\n      <ExchangeCurrency/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}